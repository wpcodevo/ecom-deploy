// Nav
const nav = document.querySelector(".nav__menu");
const navigation = document.querySelector(".navigation");
const openBtn = document.querySelector(".hamburger");
const closeBtn = document.querySelector(".close");

const navLeft = nav.getBoundingClientRect().left;
openBtn.addEventListener("click", () => {
  if (navLeft < 0) {
    navigation.classList.add("show");
    nav.classList.add("show");
    document.body.classList.add("show");
  }
});

closeBtn.addEventListener("click", () => {
  if (navLeft < 0) {
    navigation.classList.remove("show");
    nav.classList.remove("show");
    document.body.classList.remove("show");
  }
});

// Fixed Nav
const navBar = document.querySelector(".navigation");
const navHeight = navBar.getBoundingClientRect().height;
window.addEventListener("scroll", () => {
  const scrollHeight = window.pageYOffset;
  if (scrollHeight > navHeight) {
    navBar.classList.add("fix__nav");
  } else {
    navBar.classList.remove("fix__nav");
  }
});

// Scroll To
const links = [...document.querySelectorAll(".scroll-link")];
links.map(link => {
  link.addEventListener("click", e => {
    e.preventDefault();

    const id = e.target.getAttribute("href").slice(1);
    const element = document.getElementById(id);
    const fixNav = navBar.classList.contains("fix__nav");
    let position = element.offsetTop - navHeight;

    if (!fixNav) {
      position = position - navHeight;
    }

    window.scrollTo({
      top: position,
      left: 0,
    });

    navigation.classList.remove("show");
    nav.classList.remove("show");
    document.body.classList.remove("show");
  });
});

// preloader
window.addEventListener("load", () => {
  const loader = document.getElementById("pre-loader");
  setTimeout(() => {
    loader.classList.add("hide");
  }, 2000);
});

// PopUp

const popup = document.querySelector(".popup");
const closePopup = document.querySelector(".popup__close");

closePopup.addEventListener("click", () => {
  popup.classList.remove("show");
});

window.addEventListener("load", () => {
  setTimeout(() => {
    popup.classList.add("show");
  }, 5000);
});

const getProducts = async () => {
  const res = await fetch("products.json");
  const data = await res.json();
  const products = data.products;
  return products;
};

// Display Product
const displayProducts = (products, center) => {
  let display = products.map(
    ({ title, image, price }) => `<div class="product">
          <div class="product__header">
            <img src=${image} alt="product">
          </div>
          <div class="product__footer">
            <h3>${title}</h3>
            <div class="rating">
              <i class="fas fa-star"></i>
              <i class="fas fa-star"></i>
              <i class="fas fa-star"></i>
              <i class="fas fa-star"></i>
              <i class="far fa-star"></i>
            </div>
            <div class="product__price">
              <h4>$${price}</h4>
            </div>
          </div>
          <ul>
            <li>
              <a href="#">
                <i class="far fa-eye"></i>
              </a>
            </li>
            <li>
              <a href="#">
                <i class="far fa-heart"></i>
              </a>
            </li>
            <li>
              <a href="#">
                <i class="fas fa-sync"></i>
              </a>
            </li>
          </ul>
        </div>`
  );

  display = display.join("");
  center.innerHTML = display;
};

// Filtering
const catContainer = document.querySelector(".sort-category");
const filterBtns = [...document.querySelectorAll(".filter-btn")];

if (catContainer) {
  catContainer.addEventListener("click", async e => {
    const target = e.target.closest(".section__title");
    if (!target) return;
    const id = target.dataset.id;
    const products = await getProducts();

    if (id) {
      filterBtns.forEach(btn => {
        btn.classList.remove("active");
      });
      target.classList.add("active");
      const menuCat = products.filter(product => product.category === id);
      productCenter.classList.add("animate__animated", "animate__backInUp");
      setTimeout(() => {
        productCenter.classList.remove(
          "animate__animated",
          "animate__backInUp"
        );
      }, 1000);
      displayProducts(menuCat, productCenter);
    }
  });
}

const productCenter = document.querySelector(".product__center");
const latestCenter = document.querySelector(".latest__center");
const recentCenter = document.querySelector(".recent__center");
const shopCenter = document.querySelector(".shop__center");

const filterArray = async type => {
  const products = await getProducts();
  return products.filter(product => product.category === type);
};

window.addEventListener("DOMContentLoaded", async () => {
  const products = await getProducts();
  const defaultProducts = await filterArray("trend");
  const latestProducts = await filterArray("latest");
  const recentProducts = await filterArray("recent");
  displayProducts(defaultProducts, productCenter);
  displayProducts(latestProducts, latestCenter);
  displayProducts(recentProducts, recentCenter);
  displayProducts(products, shopCenter);
});

const glide1 = document.getElementById("glide1");
const glide2 = document.getElementById("glide2");
const glide3 = document.getElementById("glide3");

if (glide1)
  new Glide(glide1, {
    type: "carousel",
    startAt: 0,
    autoplay: 3000,
    hoverpause: true,
    perView: 1,
    animationDuration: 800,
    animationTimingFunc: "linear",
  }).mount();

if (glide2)
  new Glide(glide2, {
    type: "carousel",
    startAt: 0,
    perView: 5,
    hoverpause: false,
    autoplay: 2000,
    animationDuration: 800,
    animationTimingFunc: "cubic-bezier(0.165, 0.840, 0.440, 1.000)",
    breakpoints: {
      1200: {
        perView: 3,
      },
      768: {
        perView: 2,
      },
    },
  }).mount();

if (glide3) {
  new Glide(glide3, {
    type: "carousel",
    startAt: 0,
    perView: 3,
    rewin: false,
    autoplay: 3000,
    animationDuration: 800,
    animationTimingFunc: "cubic-bezier(0.165, 0.840, 0.440, 1.000)",
    breakpoints: {
      998: {
        perView: 2,
      },
      768: {
        perView: 1,
      },
    },
  }).mount();
}
